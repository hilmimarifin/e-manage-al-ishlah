generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// --- ENUMS ---
//

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
}

enum Gender {
  MALE
  FEMALE
}

//
// --- AUTH & RBAC ---
//

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  photo     String?  
  roleId    String
  role      Role     @relation(fields: [roleId], references: [id])
  classes   Class[]  @relation("TeacherClasses")
  payments  Payment[] @relation("RecordedPayments")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  users       User[]
  roleMenus   RoleMenu[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("roles")
}

model Menu {
  id          String     @id @default(cuid())
  name        String
  path        String     @unique
  icon        String?
  parentId    String?
  parent      Menu?      @relation("MenuHierarchy", fields: [parentId], references: [id])
  children    Menu[]     @relation("MenuHierarchy")
  orderIndex  Int        @default(0)
  roleMenus   RoleMenu[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("menus")
}

model RoleMenu {
  id        String  @id @default(cuid())
  roleId    String
  menuId    String
  canRead   Boolean @default(true)
  canWrite  Boolean @default(false)
  canUpdate Boolean @default(false)
  canDelete Boolean @default(false)
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  menu      Menu    @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@unique([roleId, menuId])
  @@map("role_menus")
}

//
// --- STUDENT MANAGEMENT ---
//

model Student {
  id          String        @id @default(cuid())
  entryYear   String
  fullName    String
  birthDate   DateTime?
  address     String?
  phone       String?
  guardian    String?  
  gender      Gender
  photo       String?     
  classes     StudentClass[]
  payments    Payment[]
  status      StudentStatus @default(ACTIVE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("students")
}

model Class {
  id        String        @id @default(cuid())
  name      String
  grade     String?   
  year      String?   
  teacherId String?
  monthlyFee Float?
  teacher   User?       @relation("TeacherClasses", fields: [teacherId], references: [id])
  payments  Payment[]
  students  StudentClass[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("classes")
}

model StudentClass {
  id        String   @id @default(cuid())
  studentId String
  classId   String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  year      String?  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, classId, year])
  @@map("student_classes")
}

model Payment {
  id          String        @id @default(cuid())
  studentId   String
  student     Student       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  amount      Float
  month       Int      
  status      PaymentStatus @default(PAID)
  paidAt      DateTime      @default(now())

  recordedBy  String
  teacher     User          @relation("RecordedPayments", fields: [recordedBy], references: [id])
  classId     String
  class       Class         @relation(fields: [classId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([studentId, month, classId])
  @@map("payments")
}
