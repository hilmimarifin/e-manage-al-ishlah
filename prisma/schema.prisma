generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  username   String    @unique
  password   String
  roleId     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  photo      String?
  address    String?
  birthDate  DateTime?
  birthPlace String?
  education  String?
  gender     Gender
  name       String
  nik        String    @unique
  phone      String
  classes    Class[]   @relation("TeacherClasses")
  payments   Payment[] @relation("RecordedPayments")
  role       Role      @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  roleMenus   RoleMenu[]
  users       User[]

  @@map("roles")
}

model Menu {
  id         String     @id @default(cuid())
  name       String
  path       String     @unique
  icon       String?
  parentId   String?
  orderIndex Int        @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  parent     Menu?      @relation("MenuHierarchy", fields: [parentId], references: [id])
  children   Menu[]     @relation("MenuHierarchy")
  roleMenus  RoleMenu[]

  @@map("menus")
}

model RoleMenu {
  id        String  @id @default(cuid())
  roleId    String
  menuId    String
  canRead   Boolean @default(true)
  canWrite  Boolean @default(false)
  canUpdate Boolean @default(false)
  canDelete Boolean @default(false)
  menu      Menu    @relation(fields: [menuId], references: [id], onDelete: Cascade)
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, menuId])
  @@map("role_menus")
}

model Student {
  id         String         @id @default(cuid())
  fullName   String
  birthDate  DateTime?
  address    String?
  phone      String?
  guardian   String?
  status     StudentStatus  @default(ACTIVE)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  photo      String?
  gender     Gender
  entryYear  String
  birthPlace String?
  nik        String         @unique
  payments   Payment[]
  classes    StudentClass[]

  @@map("students")
}

model Class {
  id         String         @id @default(cuid())
  name       String
  year       String?
  teacherId  String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  grade      String?
  monthlyFee Float?
  teacher    User?          @relation("TeacherClasses", fields: [teacherId], references: [id])
  payments   Payment[]
  students   StudentClass[]

  @@map("classes")
}

model StudentClass {
  id        String   @id @default(cuid())
  studentId String
  classId   String
  year      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, classId, year])
  @@map("student_classes")
}

model Payment {
  id         String   @id @default(cuid())
  studentId  String
  amount     Float    @default(0)
  month      Int
  paidAt     DateTime @default(now())
  recordedBy String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  classId    String
  class      Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  teacher    User     @relation("RecordedPayments", fields: [recordedBy], references: [id])
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, month, classId])
  @@map("payments")
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
}

enum Gender {
  MALE
  FEMALE
}
